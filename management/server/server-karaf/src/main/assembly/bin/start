#!/bin/bash
#
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
#Include enviroment variables
. $(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/subutai.env

if [ "`grep -c '10.10.10.1 management gw.intra.lan' /etc/hosts`" == "0" ]; then echo "10.10.10.1 management gw.intra.lan" >> /etc/hosts; fi
echo "management" > /etc/hostname

# Line to add commands by autobuild (do not change it)

DIRNAME=`dirname "$0"`
if [ -f "$DIRNAME/setenv" ]; then
  . "$DIRNAME/setenv"
fi

#Generate certificates before any configuration is applied
export JAVA_HOME=/opt/subutai-mng/java
export PATH=$PATH:$JAVA_HOME/bin

/opt/subutai-mng/bin/certgen

#Function to generate self signed certificate for peer
generate_keystore_certificate() {
    local alias=$1
    local file_path=$2
#    echo "Generating cert for alias" $alias
    keytool -genkey \
     -alias $alias \
    -storetype JKS \
    -keyalg RSA \
    -validity 360 \
    -keysize 1024 \
    -keystore $file_path \
    -dname "cn=subut.ai, ou=IT, o=Subutai, c=KG" \
    -storepass subutai -keypass subutai
}

#Create and add self peer to truststore
generate_truststore_certificate() {
    local alias=$1
    local keystore=$2
    local file_path=$3
    local client_cert="client.cer"
    #first generate certificate
    $(keytool -export -alias $alias -file $client_cert -keystore $keystore -storepass subutai)

    $(keytool -import -trustcacerts -alias "" -file $client_cert -keystore $file_path -storepass subutai -noprompt)

	rm $client_cert
}

generate_keystore (){
    folder=$SUBUTAI_APP_DATA_PATH"/keystores"
    if [ ! -d $folder ]; then
        mkdir -p $folder
       generate_keystore_certificate "root_server_px1" $folder"/keystore_server_px1.jks"
       generate_keystore_certificate "root_server_px2" $folder"/keystore_server_px2.jks"
       generate_keystore_certificate "root_special_px1" $folder"/keystore_special_px1.jks"
       generate_truststore_certificate "root_server_px2" $folder"/keystore_server_px2.jks" $folder"/truststore_server_px2.jks"

       java -jar /opt/subutai-mng/keys/peer-key-generator-1.0-SNAPSHOT.jar $folder subutai`date +%s`@subutai.io

       cp $DIRNAME/../data/certs/test.*kr $folder
       cp $DIRNAME/../keys/h.public.gpg $folder


    fi
}


DIRNAME=`dirname "$0"`
PROGNAME=`basename "$0"`

#
# Sourcing environment settings for karaf similar to tomcats setenv
#
KARAF_SCRIPT="start"
export KARAF_SCRIPT
if [ -f "$DIRNAME/setenv" ]; then
  . "$DIRNAME/setenv"
fi

warn() {
    echo "${PROGNAME}: $*"
}

die() {
    warn "$*"
    exit 1
}

detectOS() {
    # OS specific support (must be 'true' or 'false').
    cygwin=false;
    darwin=false;
    aix=false;
    os400=false;
    case "`uname`" in
        CYGWIN*)
            cygwin=true
            ;;
        Darwin*)
            darwin=true
            ;;
        AIX*)
            aix=true
            ;;
        OS400*)
            os400=true
            ;;
    esac
    # For AIX, set an environment variable
    if $aix; then
         export LDR_CNTRL=MAXDATA=0xB0000000@DSA
         echo $LDR_CNTRL
    fi
}

locateHome() {
    if [ "x$KARAF_HOME" != "x" ]; then
        warn "Ignoring predefined value for KARAF_HOME"
    fi

    # In POSIX shells, CDPATH may cause cd to write to stdout
    (unset CDPATH) >/dev/null 2>&1 && unset CDPATH

    KARAF_HOME=`cd $DIRNAME/..; pwd`
    if [ ! -d "$KARAF_HOME" ]; then
        die "KARAF_HOME is not valid: $KARAF_HOME"
    fi
}

locateBase() {
    if [ "x$KARAF_BASE" != "x" ]; then
        if [ ! -d "$KARAF_BASE" ]; then
            die "KARAF_BASE is not valid: $KARAF_BASE"
        fi
    else
        KARAF_BASE=$KARAF_HOME
    fi
}

locateData() {
    if [ "x$KARAF_DATA" != "x" ]; then
        if [ ! -d "$KARAF_DATA" ]; then
		mkdir -p "$KARAF_DATA/"
        fi
    else
        KARAF_DATA=$KARAF_BASE/data
    fi
}

locateEtc() {
    if [ "x$KARAF_ETC" != "x" ]; then
        if [ ! -d "$KARAF_ETC" ]; then
            die "KARAF_ETC is not valid: $KARAF_ETC"
        fi
    else
        KARAF_ETC=$KARAF_BASE/etc
    fi
}

enableRedirect() {
    if [ "x$KARAF_REDIRECT" != "x" ]; then
        warn "Redirecting Karaf output to $KARAF_REDIRECT"
    else
        KARAF_REDIRECT="/dev/null"
    fi
}

init() {
    # Determine if there is special OS handling we must perform
    detectOS

    # Locate the Karaf home directory
    locateHome

    # Locate the Karaf base directory
    locateBase

    # Locate the Karaf data directory
    locateData

    # Locate the Karaf etc directory
    locateEtc

    # Enable or not the Karaf output redirection
    enableRedirect

    #generate jetty keystores
    generate_keystore
}

run() {
    if $cygwin; then
        KARAF_HOME=`cygpath --path --windows "$KARAF_HOME"`
        KARAF_BASE=`cygpath --path --windows "$KARAF_BASE"`
        KARAF_DATA=`cygpath --path --windows "$KARAF_DATA"`
        KARAF_ETC=`cygpath --path --windows "$KARAF_ETC"`
        CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
    fi
    # Ensure the log directory exists -- we need to have a place to redirect stdout/stderr
    if [ ! -d "$KARAF_DATA/log" ]; then
        mkdir -p "$KARAF_DATA/log"
    fi
    exec "$KARAF_HOME"/bin/karaf server "$@" >> "$KARAF_REDIRECT" 2>&1 #&
}

main() {
    init
    run "$@"
}

main "$@"
